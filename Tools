#!/usr/bin/env bash

#
# 多功能脚本工具箱框架 (灵感来源: kejilion.sh)
#

# 遇到任何错误则终止脚本 (在函数内部按需使用)
# set -e

# --- 颜色定义 ---
# 使用 tput 动态获取颜色代码，兼容性更好
if command -v tput >/dev/null 2>&1 && [[ $(tput colors) -ge 8 ]]; then
  C_RESET=$(tput sgr0)
  C_RED=$(tput setaf 1)
  C_GREEN=$(tput setaf 2)
  C_YELLOW=$(tput setaf 3)
  C_BLUE=$(tput setaf 4)
  C_CYAN=$(tput setaf 6)
else
  # 如果 tput 不可用，则使用静态代码
  C_RESET='\033[0m'
  C_RED='\033[0;31m'
  C_GREEN='\033[0;32m'
  C_YELLOW='\033[0;33m'
  C_BLUE='\033[0;34m'
  C_CYAN='\033[0;36m'
fi

# --- 辅助函数 ---

# 功能完成后暂停，等待用户按任意键继续
function press_any_key_to_continue() {
  echo -e "\n${C_YELLOW}按任意键返回主菜单...${C_RESET}"
  # read a single character
  read -n 1 -s -r
}

# --- 功能函数定义 ---
# 这里是每个菜单选项对应的具体功能实现

# 1. 系统信息查询
function show_system_info() {
  clear
  echo -e "${C_CYAN}======== 系统信息查询 ========${C_RESET}"
  echo -e "主机名: ${C_GREEN}$(hostname)${C_RESET}"
  echo -e "操作系统: ${C_GREEN}$(source /etc/os-release && echo $PRETTY_NAME)${C_RESET}"
  echo -e "内核版本: ${C_GREEN}$(uname -r)${C_RESET}"
  echo -e "CPU型号: ${C_GREEN}$(grep "model name" /proc/cpuinfo | head -n1 | cut -d: -f2)${C_RESET}"
  echo -e "内存使用: ${C_GREEN}$(free -h | awk '/^Mem/ {print $3 "/" $2}')${C_RESET}"
  echo -e "硬盘使用: ${C_GREEN}$(df -h / | awk 'NR==2 {print $3 "/" $2 " (" $5 ")"}') ${C_RESET}"
  echo -e "公网IP: ${C_GREEN}$(curl -s ip.sb)${C_RESET}"
  echo -e "${C_CYAN}===============================${C_RESET}"
  press_any_key_to_continue
}

# 2. 系统更新
function update_system() {
  clear
  echo -e "${C_CYAN}======== 开始更新系统 ========${C_RESET}"
  if command -v apt-get &>/dev/null; then
    sudo apt-get update && sudo apt-get upgrade -y
  elif command -v yum &>/dev/null; then
    sudo yum update -y
  else
    echo -e "${C_RED}未知的包管理器，无法自动更新。${C_RESET}"
  fi
  echo -e "${C_GREEN}系统更新完成！${C_RESET}"
  press_any_key_to_continue
}

# 3. 系统清理
function clean_system() {
  echo -e "${C_YELLOW}功能正在开发中...${C_RESET}"
  sleep 1
}

# 4. 基础工具
function basic_tools() {
  echo -e "${C_YELLOW}功能正在开发中...${C_RESET}"
  sleep 1
}

# 5. BBR管理
function manage_bbr() {
  echo -e "${C_YELLOW}功能正在开发中...${C_RESET}"
  sleep 1
}

# 6. Docker管理
function manage_docker() {
  echo -e "${C_YELLOW}功能正在开发中...${C_RESET}"
  sleep 1
}

# ... 其他功能的占位符 ...
# 你可以按照这个格式继续添加所有15个以及P, 00等功能
function ldnmp_setup() {
    echo -e "${C_YELLOW}功能正在开发中...${C_RESET}"
    sleep 1
}

# 99. 安装快捷指令 # <--- 这是新增的整个功能函数
function install_shortcut() {
  # --- 配置 ---
  # 定义脚本在 GitHub 上的 Raw 链接
  local script_url="https://raw.githubusercontent.com/wliuy/mypublic/main/mypublic/Tools"
  # 定义脚本安装到系统后的文件名
  local install_name="tools"
  # 定义快捷方式的名称
  local shortcut_name="y"
  
  clear
  echo -e "${C_CYAN}开始安装快捷方式 '${shortcut_name}'...${C_RESET}"

  # 1. 检查 root 权限
  if [[ "$(id -u)" -ne 0 ]]; then
    echo -e "${C_RED}错误：此安装需要 root 权限才能将脚本放入 /usr/local/bin/${C_RESET}"
    echo -e "${C_YELLOW}请尝试使用 'sudo bash <(curl...)' 来运行此脚本的安装选项。${C_RESET}"
    press_any_key_to_continue
    return
  fi

  # 2. 下载脚本到 /usr/local/bin
  local install_path="/usr/local/bin/${install_name}"
  echo -e "${C_BLUE}正在从 GitHub 下载最新版脚本到 ${install_path}...${C_RESET}"
  if curl -L "${script_url}" -o "${install_path}"; then
    echo -e "${C_GREEN}下载成功！${C_RESET
