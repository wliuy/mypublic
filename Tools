#!/usr/bin/env bash

#
# AYANG's Toolbox v2.0 (基于 kejilion.sh 风格定制)
#

# --- 颜色定义 (源于 kejilion.sh) ---
gl_hui='\e[37m'
gl_hong='\033[31m'
gl_lv='\033[32m'
gl_huang='\033[33m'
gl_lan='\033[34m'
gl_bai='\033[0m'
gl_zi='\033[35m'
gl_kjlan='\033[96m'


# --- 辅助函数 (源于 kejilion.sh) ---

# 操作完成后的暂停提示
function break_end() {
	  echo -e "${gl_lv}操作完成${gl_bai}"
	  echo "按任意键继续..."
	  read -n 1 -s -r -p ""
	  echo ""
	  clear
}

# 通用安装函数 (源于 kejilion.sh)
install() {
	if [ $# -eq 0 ]; then
		echo "未提供软件包参数!"
		return 1
	fi

	for package in "$@"; do
		if ! command -v "$package" &>/dev/null; then
			echo -e "${gl_huang}正在安装 $package...${gl_bai}"
			if command -v dnf &>/dev/null; then
				dnf install -y "$package"
			elif command -v yum &>/dev/null; then
				yum install -y "$package"
			elif command -v apt &>/dev/null; then
				apt update -y
				apt install -y "$package"
			elif command -v apk &>/dev/null; then
				apk add "$package"
			elif command -v pacman &>/dev/null; then
				pacman -S --noconfirm "$package"
			else
				echo "未知的包管理器!"
				return 1
			fi
		fi
	done
}

# --- 功能函数定义 ---

# 1. 系统信息查询 (代码源于 kejilion.sh 的 linux_ps 函数)
function system_info() {
	clear
	
	# 获取IP地址
	ipv4_address=$(curl -s https://ipinfo.io/ip)
	ipv6_address=$(curl -s --max-time 1 https://v6.ipinfo.io/ip)

	local cpu_info=$(lscpu | awk -F': +' '/Model name:/ {print $2; exit}')
	local cpu_usage_percent=$(awk '{u=$2+$4; t=$2+$4+$5; if (NR==1){u1=u; t1=t;} else printf "%.0f\n", (($2+$4-u1) * 100 / (t-t1))}' \
		<(grep 'cpu ' /proc/stat) <(sleep 1; grep 'cpu ' /proc/stat))
	local cpu_cores=$(nproc)
	local mem_info=$(free -b | awk 'NR==2{printf "%.2f/%.2fG (%.2f%%)", $3/1024/1024/1024, $2/1024/1024/1024, $3*100/$2}')
	local disk_info=$(df -h | awk '$NF=="/"{printf "%s/%s (%s)", $3, $2, $5}')
	local country=$(curl -s ipinfo.io/country)
	local city=$(curl -s ipinfo.io/city)
	local isp_info=$(curl -s ipinfo.io/org)
	local load=$(uptime | awk '{print $(NF-2), $(NF-1), $NF}')
	local cpu_arch=$(uname -m)
	local hostname=$(uname -n)
	local kernel_version=$(uname -r)
	local os_info=$(grep PRETTY_NAME /etc/os-release | cut -d '=' -f2 | tr -d '"')
	local runtime=$(cat /proc/uptime | awk -F. '{run_days=int($1 / 86400);run_hours=int(($1 % 86400) / 3600);run_minutes=int(($1 % 3600) / 60); if (run_days > 0) printf("%d天 ", run_days); if (run_hours > 0) printf("%d时 ", run_hours); printf("%d分\n", run_minutes)}')

	echo ""
	echo -e "系统信息查询"
	echo -e "${gl_kjlan}-------------"
	echo -e "${gl_kjlan}主机名:       ${gl_bai}$hostname"
	echo -e "${gl_kjlan}系统版本:     ${gl_bai}$os_info"
	echo -e "${gl_kjlan}Linux版本:    ${gl_bai}$kernel_version"
	echo -e "${gl_kjlan}-------------"
	echo -e "${gl_kjlan}CPU架构:      ${gl_bai}$cpu_arch"
	echo -e "${gl_kjlan}CPU型号:      ${gl_bai}$cpu_info"
	echo -e "${gl_kjlan}CPU核心数:    ${gl_bai}$cpu_cores"
	echo -e "${gl_kjlan}-------------"
	echo -e "${gl_kjlan}CPU占用:      ${gl_bai}$cpu_usage_percent%"
	echo -e "${gl_kjlan}系统负载:     ${gl_bai}$load"
	echo -e "${gl_kjlan}物理内存:     ${gl_bai}$mem_info"
	echo -e "${gl_kjlan}硬盘占用:     ${gl_bai}$disk_info"
	echo -e "${gl_kjlan}-------------"
	if [ -n "$ipv4_address" ]; then
		echo -e "${gl_kjlan}IPv4地址:     ${gl_bai}$ipv4_address"
	fi
	if [ -n "$ipv6_address" ]; then
		echo -e "${gl_kjlan}IPv6地址:     ${gl_bai}$ipv6_address"
	fi
	echo -e "${gl_kjlan}运营商:       ${gl_bai}$isp_info"
	echo -e "${gl_kjlan}地理位置:     ${gl_bai}$country $city"
	echo -e "${gl_kjlan}-------------"
	echo -e "${gl_kjlan}运行时长:     ${gl_bai}$runtime"
	echo
}

# 2. 系统更新 (代码源于 kejilion.sh 的 linux_update 函数)
function system_update() {
	echo -e "${gl_huang}正在系统更新...${gl_bai}"
	if command -v dnf &>/dev/null; then
		dnf -y update
	elif command -v yum &>/dev/null; then
		yum -y update
	elif command -v apt &>/dev/null; then
		apt update -y && apt full-upgrade -y
	elif command -v apk &>/dev/null; then
		apk update && apk upgrade
	elif command -v pacman &>/dev/null; then
		pacman -Syu --noconfirm
	else
		echo "未知的包管理器!"
		return
	fi
}

# 3. 系统清理 (代码源于 kejilion.sh 的 linux_clean 函数)
function system_clean() {
	echo -e "${gl_huang}正在系统清理...${gl_bai}"
	if command -v dnf &>/dev/null; then
		dnf autoremove -y && dnf clean all && journalctl --rotate && journalctl --vacuum-time=1s
	elif command -v yum &>/dev/null; then
		yum autoremove -y && yum clean all && journalctl --rotate && journalctl --vacuum-time=1s
	elif command -v apt &>/dev/null; then
		apt autoremove --purge -y && apt clean -y && apt autoclean -y && journalctl --rotate && journalctl --vacuum-time=1s
	elif command -v apk &>/dev/null; then
		rm -rf /var/cache/apk/*
	elif command -v pacman &>/dev/null; then
		pacman -Rns $(pacman -Qdtq) --noconfirm && pacman -Scc --noconfirm && journalctl --rotate && journalctl --vacuum-time=1s
	else
		echo "未知的包管理器!"
		return
	fi
	return
}

# 6. Docker管理

# Docker 安装函数 (源于 kejilion.sh 的 install_add_docker 函数)
function docker_install_helper() {
	echo -e "${gl_huang}正在安装docker环境...${gl_bai}"
    if ! command -v docker &>/dev/null; then
        curl -fsSL https://get.docker.com | sh
    fi
    # 设置国内镜像源
    local country=$(curl -s ipinfo.io/country)
    if [ "$country" = "CN" ]; then
        mkdir -p /etc/docker
        cat > /etc/docker/daemon.json << EOF
{
  "registry-mirrors": ["https://docker.m.daocloud.io", "https://docker.1panel.live", "https://docker.aliyuncs.com"]
}
EOF
    fi
    systemctl enable docker
    systemctl restart docker
    install docker-compose
    echo -e "${gl_lv}Docker 环境安装/更新完成！${gl_bai}"
}

# Docker 容器管理 (源于 kejilion.sh 的 docker_ps 函数)
function docker_container_menu() {
    while true; do
        clear
        echo "Docker容器列表"
        docker ps -a --format "table {{.ID}}\t{{.Names}}\t{{.Status}}\t{{.Ports}}"
        echo ""
        echo "容器操作"
        echo "------------------------"
        echo "1. 启动指定容器             2. 停止指定容器"
        echo "3. 删除指定容器             4. 重启指定容器"
        echo "5. 查看容器日志             6. 进入容器终端"
        echo "------------------------"
        echo "0. 返回Docker主菜单"
        echo "------------------------"
        read -p "请输入你的选择: " sub_choice
        case $sub_choice in
            1) read -p "请输入要启动的容器名或ID: " name; docker start $name ;;
            2) read -p "请输入要停止的容器名或ID: " name; docker stop $name ;;
            3) read -p "请输入要删除的容器名或ID: " name; docker rm -f $name ;;
            4) read -p "请输入要重启的容器名或ID: " name; docker restart $name ;; # <--- 这里已修正
            5) read -p "请输入要查看日志的容器名或ID: " name; docker logs $name ;;
            6) read -p "请输入要进入的容器名或ID: " name; docker exec -it $name /bin/sh ;;
            0) break ;;
            *) echo "无效输入" ;;
        esac
        echo -e "\n操作完成，按任意键继续..."
        read -n 1 -s -r
    done
}

# Docker 镜像管理 (源于 kejilion.sh 的 docker_image 函数)
function docker_image_menu() {
    while true; do
        clear
        echo "Docker镜像列表"
        docker image ls
        echo ""
        echo "镜像操作"
        echo "------------------------"
        echo "1. 拉取指定镜像             2. 删除指定镜像"
        echo "3. 清理无用镜像"
        echo "------------------------"
        echo "0. 返回Docker主菜单"
        echo "------------------------"
        read -p "请输入你的选择: " sub_choice
        case $sub_choice in
            1) read -p "请输入要拉取的镜像名 (例如: ubuntu:latest): " name; docker pull $name ;;
            2) read -p "请输入要删除的镜像名或ID: " name; docker rmi -f $name ;;
            3) docker image prune -af ;;
            0) break ;;
            *) echo "无效输入" ;;
        esac
        echo -e "\n操作完成，按任意键继续..."
        read -n 1 -s -r
    done
}


# Docker 管理主菜单
function docker_management() {
    while true; do
        clear
        echo "Docker 管理"
        if command -v docker &> /dev/null; then
            docker -v
            docker compose version
        else
            echo -e "${gl_hui}Docker 未安装${gl_bai}"
        fi
        echo -e "${gl_kjlan}------------------------"
        echo "1. 安装/更新 Docker 环境"
        echo "2. 管理 Docker 容器"
        echo "3. 管理 Docker 镜像"
        echo "4. 查看 Docker 全局状态"
        echo "5. 清理无用的Docker数据"
        echo -e "${gl_kjlan}------------------------"
        echo "0. 返回主菜单"
        echo -e "${gl_kjlan}------------------------${gl_bai}"
        read -p "请输入你的选择: " choice

        case $choice in
            1) clear; docker_install_helper; break_end ;;
            2) docker_container_menu ;;
            3) docker_image_menu ;;
            4) clear; docker system df; break_end ;;
            5) clear; docker system prune -af --volumes; break_end ;;
            0) break ;;
            *) echo "无效输入" ;;
        esac
    done
}


# --- 主菜单显示 ---
function main_menu() {
  clear
  echo -e "${gl_kjlan}"
  echo -e "    █████╗ ██╗   ██╗ █████╗ ███╗   ██╗ ██████╗"
  echo -e "   ██╔══██╗╚██╗ ██╔╝██╔══██╗████╗  ██║██╔════╝"
  echo -e "   ███████║ ╚████╔╝ ███████║██╔██╗ ██║██║  ███╗"
  echo -e "   ██╔══██║  ╚██╔╝  ██╔══██║██║╚██╗██║██║   ██║"
  echo -e "   ██║  ██║   ██║   ██║  ██║██║ ╚████║╚██████╔╝"
  echo -e "   ╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝"
  echo -e "${gl_bai}"
  echo -e "${gl_lan}               AYANG's Toolbox v2.0               ${gl_bai}"
  echo -e "${gl_kjlan}----------------------------------------------------${gl_bai}"
  echo -e "${gl_kjlan}1.  ${gl_bai}系统信息查询"
  echo -e "${gl_kjlan}2.  ${gl_bai}系统更新"
  echo -e "${gl_kjlan}3.  ${gl_bai}系统清理"
  echo -e "${gl_kjlan}6.  ${gl_bai}Docker管理"
  echo -e "${gl_kjlan}----------------------------------------------------${gl_bai}"
  echo -e "${gl_kjlan}0.  ${gl_bai}退出脚本"
  echo -e "${gl_kjlan}----------------------------------------------------${gl_bai}"
  read -p "请输入你的选择: " choice
}

# --- 主循环 ---
while true; do
  main_menu
  case $choice in
    1) system_info; break_end ;;
    2) clear; system_update; break_end ;;
    3) clear; system_clean; break_end ;;
    6) docker_management ;;
    0) clear; exit ;;
    *) echo -e "${gl_hong}无效的输入!${gl_bai}"; sleep 1 ;;
  esac
done
